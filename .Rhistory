load("~/projects/patrick/murderStLgcpRw.RData")
write.csv(result, "newdatafile.csv", row.names=FALSE)
result<-reformatData("datafile.txt", id="route1")
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',4'))
dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X1<-as.numeric(as.character(dat$X1))
dat$X2<-as.numeric(as.character(dat$X2))
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
result<-reformatData("datafile.txt", id="route1")
head(result)
#   latitude longitude time     id
#1  40.72239 -73.99517    1 route1
#2  40.72158 -73.99548    2 route1
#3  40.72128 -73.99472    3 route1
#4  40.72089 -73.99376    4 route1
#5  40.72158 -73.99348    5 route1
write.csv(result, "newdatafile.csv", row.names=FALSE)
head(result)
result<-reformatData("datafile.txt", id="route1")
pwd
dir
dir()
pwd()
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/datafile.txt", id="route1")
head(result)
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',4'))
dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X1<-as.numeric(as.character(dat$X1))
dat$X2<-as.numeric(as.character(dat$X2))
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
result<-reformatData("datafile.txt", id="route1")
write.csv(result, "newdatafile.csv", row.names=FALSE)
write.csv(result, "/Users/mathewbrown/projects/bikeRoute/newdatafile.csv", row.names=FALSE)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatafile.txt", id="route1")
head(result)
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',4'))
dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X1<-as.numeric(as.character(dat$X2))
dat$X2<-as.numeric(as.character(dat$X1))
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
head(dat)
head[dat]
head[result]
result
write.csv(result, "/Users/mathewbrown/projects/bikeRoute/newbikedatafile.csv", row.names=FALSE)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatafile.txt", id="route1")
head(result)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
head(result)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
head(result)
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',4'))
dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X1<-as.numeric(as.character(dat$X2))
dat$X2<-as.numeric(as.character(dat$X1))
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
head(result)
dat<-unlist(strsplit(dat, ',4'))
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
path = "/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt"
dat<-scan(path, what="character")
head(dat)
dat<-scan(path, what="character")
head(dat)
dat<-scan(path, what="character")
head(dat)
dat<-unlist(strsplit(dat, ',4'))
head(dat)
dat<-unlist(strsplit(dat, ',4'))
head(dat)
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-7'))
dat[-1]<-paste("4", dat[-1], sep="")
head(dat)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
head(result)
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-7'))
dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X1<-as.numeric(as.character(dat$X2))
dat$X2<-as.numeric(as.character(dat$X1))
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
head(result)
path
dat<-scan(path, what="character")
dat<-unlist(strsplit(dat, ',-7'))
head(dat)
dat<-unlist(strsplit(dat, ',-'))
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
head(dat)
dat[-1]
head(dat)
dat[-1]
dat[1]
dat[-1]
paste("4", dat[-1], sep="")
head(dat)
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
head(dat)
dat$X1<-as.numeric(as.character(dat$X2))
head(dat)
dat$X2<-as.numeric(as.character(dat$X1))
head(dat)
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
#dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X2<-as.numeric(as.character(dat$X2))
dat$X1<-as.numeric(as.character(dat$X1))
head(dat)
dat <- dat[ , c("X2", "X1")]
head(dat)
dat$time<-1:nrow(dat)
head(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
head(dat)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
head(result)
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
#dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X2<-as.numeric(as.character(dat$X2))
dat$X1<-as.numeric(as.character(dat$X1))
dat <- dat[ , c("X2", "X1")]
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
#   latitude longitude time     id
#1  40.72239 -73.99517    1 route1
#2  40.72158 -73.99548    2 route1
#3  40.72128 -73.99472    3 route1
#4  40.72089 -73.99376    4 route1
#5  40.72158 -73.99348    5 route1
write.csv(result, "/Users/mathewbrown/projects/bikeRoute/newbikedatafile.csv", row.names=FALSE)
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
#dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X2<-as.numeric(as.character(dat$X2))
dat$X1<-as.numeric(as.character(dat$X1))
dat <- dat[ , c("X2", "X1")]
head(dat)
names(dat)[1:2]<-c("latitude", "longitude")
head(dat)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
head(result)
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
#dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X2<-as.numeric(as.character(dat$X2))
dat$X1<-as.numeric(as.character(dat$X1))
dat <- dat[ , c("X2", "X1")]
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
#   latitude longitude time     id
#1  40.72239 -73.99517    1 route1
#2  40.72158 -73.99548    2 route1
#3  40.72128 -73.99472    3 route1
#4  40.72089 -73.99376    4 route1
#5  40.72158 -73.99348    5 route1
write.csv(result, "/Users/mathewbrown/projects/bikeRoute/newbikedatafile.csv", row.names=FALSE)
dat<-scan(path, what="character")
dat<-unlist(strsplit(dat, ',-'))
head(dat)
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X2<-as.numeric(as.character(dat$X2))
dat$X1<-as.numeric(as.character(dat$X1))
head(dat)
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
#dat[-1]<-paste("4", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
head(dat)
dat<-scan(path, what="character")
head(dat)
dat<-unlist(strsplit(dat, ',-'))
head(dat)
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
dat[-1]<-paste("-1", dat[-1], sep="")
head(dat)
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
dat[-1]<-paste("-", dat[-1], sep="")
head(dat)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
head(result)
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
dat[-1]<-paste("-", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X2<-as.numeric(as.character(dat$X2))
dat$X1<-as.numeric(as.character(dat$X1))
dat <- dat[ , c("X2", "X1")]
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
#   latitude longitude time     id
#1  40.72239 -73.99517    1 route1
#2  40.72158 -73.99548    2 route1
#3  40.72128 -73.99472    3 route1
#4  40.72089 -73.99376    4 route1
#5  40.72158 -73.99348    5 route1
write.csv(result, "/Users/mathewbrown/projects/bikeRoute/newbikedatafile.csv", row.names=FALSE)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
head(result)
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
dat[-1]<-paste("-", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X2<-as.numeric(as.character(dat$X2))
dat$X1<-as.numeric(as.character(dat$X1))
dat <- dat[ , c("X2", "X1")]
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
#   latitude longitude time     id
#1  40.72239 -73.99517    1 route1
#2  40.72158 -73.99548    2 route1
#3  40.72128 -73.99472    3 route1
#4  40.72089 -73.99376    4 route1
#5  40.72158 -73.99348    5 route1
write.csv(result, "/Users/mathewbrown/projects/bikeRoute/newbikedatafile.csv", row.names=FALSE)
result<-reformatData("/Users/mathewbrown/projects/bikeRoute/bikedatfile.txt", id="route1")
head(result)
reformatData<-function(path, id){
dat<-scan(path, what="character")
#With more time I would have used regular expressions rather than
#this terrible alternative.
dat<-unlist(strsplit(dat, ',-'))
dat[-1]<-paste("-", dat[-1], sep="")
dat<-data.frame(matrix(unlist(strsplit(dat, ",")), ncol=2, byrow=T))
dat$X2<-as.numeric(as.character(dat$X2))
dat$X1<-as.numeric(as.character(dat$X1))
dat <- dat[ , c("X2", "X1")]
dat$time<-1:nrow(dat)
dat$id<-id
names(dat)[1:2]<-c("latitude", "longitude")
return(dat)
}
#   latitude longitude time     id
#1  40.72239 -73.99517    1 route1
#2  40.72158 -73.99548    2 route1
#3  40.72128 -73.99472    3 route1
#4  40.72089 -73.99376    4 route1
#5  40.72158 -73.99348    5 route1
write.csv(result, "/Users/mathewbrown/projects/bikeRoute/newbikedatafile.csv", row.names=FALSE)
pwd
dir
dir()
cd projects
getwd()
setwd("/Users/mathewbrown/fun/chord")
getwd()
#' xml data
#' xml data
#+ vWinnipeg
library('XML')
x=readHTMLTable('http://www.nhl.com/scores/htmlreports/20142015/TH020224.HTM',as.is=TRUE)
library('RCurl')
webpage <- getURL('http://www.nhl.com/scores/htmlreports/20142015/TH020224.HTM')
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
pagetree <- htmlTreeParse(webpage, error=function(...){},useInternalNodes=TRUE)
x <- xpathSApply(pagetree, "//*/table/tr/td", xmlValue)
x = gsub(" / [[:digit:]]+:[[:digit:]]+$","", x)
x = gsub("Elapsed / Game$","", x)
x = gsub("of Shift$","", x)
players = grep("^[[:digit:]]+ ", x)
per = grep("^Per$", x)
dateRow=grep("[[:alpha:]]+ [[:digit:]]+, 201[[:digit:]]$",x)
xdate = x[dateRow]
xdate = gsub("^[[:alpha:]]+, ", "", xdate)
res = NULL
twentyminutes = 20*60
for(Dplayer in 1:length(players)) {
h1 = x[seq(players[Dplayer]+1,
players[Dplayer]+6)]
p1 = matrix(x[seq(
players[Dplayer]+1+6,
sort(per[per>players[Dplayer]])[2]-3)
], ncol=6,byrow=TRUE)
colnames(p1) = h1
cplayer = x[players[Dplayer]]
p1 = cbind(
player=gsub("^[[:digit:]]+ ", "", cplayer),
number = strsplit(cplayer, " ")[[1]][1],
p1)
p1 = as.data.frame(p1)
p1$number = as.numeric(p1$number)
p1$Per = as.numeric(p1$Per)
p1$Start = strptime(paste(xdate, p1$Start),
"%B %d, %Y %M:%S") + twentyminutes*(p1$Per-1)
p1$End = strptime(paste(xdate, p1$End),
"%B %d, %Y %M:%S") + twentyminutes*(p1$Per-1)
res = rbind(res, p1)
}
res[1:4,1:6]
#'
#'
#' convert to intervals
#+ iranges
library('intervals')
res$intervals = Intervals(cbind(
as.integer(res$Start),
as.integer(res$End)
),
closed=c(FALSE,TRUE))
#'
#+ overlap
Splayers = unique(as.character(res$player))
allPairs = expand.grid(Splayers,Splayers)
theLower =
matrix(1:nrow(allPairs),ncol=length(Splayers))
theLower = theLower[lower.tri(theLower,diag=FALSE)]
allPairs = allPairs[theLower,]
pairsIntervals = mapply(
function(p1, p2, data){
interval_intersection(
data[data$player==p1,]$intervals,
data[data$player==p2,]$intervals
)
},
p1=as.character(allPairs[,1]),
p2=as.character(allPairs[,2]),
MoreArgs=list(data=res)
)
names(pairsIntervals) = paste(allPairs[,1], allPairs[,2],sep=' / ')
#'
#+ plotRangesFunction, echo=FALSE
plotRanges <- function(data, pairs,
p1='subban',p2='markov',
...)
{
p1 = grep(p1, data$player, ignore.case=TRUE,value=TRUE)[1]
p2 = grep(p2, data$player, ignore.case=TRUE,value=TRUE)[1]
thePair = intersect(
grep(p1, names(pairs), value=TRUE),
grep(p2, names(pairs), value=TRUE)
)
xList = list(
data[data$player==p1,]$intervals,
data[data$player==p2,]$intervals,
pairs[[thePair]]
)
names(xList) = c(p1, p2,
'Both')
forX = as.POSIXct(
as.integer(unlist(xList)),
origin= '1970-01-01 00:00.00 UTC'
)
par(oma=c(0,6,0,0))
plot(range(forX),
c(0,length(xList)+1),
yaxt='n', ylab='', xlab='time',
main=format(forX[1],'%d %B %Y'),
type='n',
...
)
axis(2, at=1:length(xList),
names(xList)    ,las=2
)
for(Dplayer in 1:length(xList)){
for(Dshift in 1:nrow(xList[[Dplayer]]))
lines(xList[[Dplayer]][Dshift,],
rep(Dplayer,2),
type='o',
pch=c(16,1),cex=0.6)
}
}
#'
toi = unlist(lapply(pairsIntervals, function(qq) sum(size(qq))))
toi[1:10]
#' plot the data
#+ plotShifts, fig.cap='shifts'
# plotRanges(res,pairsIntervals,'eller','markov')
#'
toi
plotRanges(res,pairsIntervals,'eller','markov')
toi
toi[1]
toi[1:12]
